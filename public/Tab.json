{
  "name": "TabWindow",
  "type": "registry:ui",
  "dependencies": ["class-variance-authority","react-dnd-html5-backend","react-dnd"],
  "files": [
    {
      "path": "components/ui/TabWindow.tsx",
      "content": "\"use client\";\r\n\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nconst LOCAL_STORAGE_KEY = \"tab-system-data\";\r\n\r\nexport default function Test() {\r\n  const [tabs, setTabs] = useState([\r\n    { id: \"tab1\", label: \"Tab 1\", content: \"Content 1\" },\r\n    { id: \"tab2\", label: \"Tab 2\", content: \"Content 2\" },\r\n  ]);\r\n  const [activeTab, setActiveTab] = useState(\"tab1\");\r\n\r\n  // Load tabs and activeTab from localStorage\r\n  useEffect(() => {\r\n    const savedData = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    if (savedData) {\r\n      const parsedData = JSON.parse(savedData);\r\n      setTabs(parsedData.tabs || []);\r\n      setActiveTab(parsedData.activeTab || \"tab1\");\r\n    }\r\n  }, []);\r\n\r\n  // Save tabs and activeTab to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      LOCAL_STORAGE_KEY,\r\n      JSON.stringify({ tabs, activeTab })\r\n    );\r\n  }, [tabs, activeTab]);\r\n\r\n  const addTab = () => {\r\n    const newTab = {\r\n      id: `tab${tabs.length + 1}`,\r\n      label: `Tab ${tabs.length + 1}`,\r\n      content: `Content ${tabs.length + 1}`,\r\n    };\r\n    setTabs([...tabs, newTab]);\r\n    setActiveTab(newTab.id);\r\n  };\r\n\r\n  const closeTab = (tabId: string) => {\r\n    setTabs((prev) => prev.filter((tab) => tab.id !== tabId));\r\n    if (activeTab === tabId && tabs.length > 1) {\r\n      const newActive = tabs.find((tab) => tab.id !== tabId)?.id || \"\";\r\n      setActiveTab(newActive);\r\n    }\r\n  };\r\n\r\n  const moveTab = (dragIndex: number, hoverIndex: number) => {\r\n    const updatedTabs = [...tabs];\r\n    const [movedTab] = updatedTabs.splice(dragIndex, 1);\r\n    updatedTabs.splice(hoverIndex, 0, movedTab);\r\n    setTabs(updatedTabs);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <DndProvider backend={HTML5Backend}>\r\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n        <TabsList onAddTab={addTab} view=\"style1\">\r\n          {tabs.map((tab, index) => (\r\n            <TabsTrigger\r\n              key={tab.id}\r\n              value={tab.id}\r\n              view=\"style1\"\r\n              onClose={() => closeTab(tab.id)}\r\n              moveTab={moveTab}\r\n              index={index}\r\n            >\r\n              {tab.label}\r\n            </TabsTrigger>\r\n          ))}\r\n        </TabsList>\r\n        {tabs.map((tab) => (\r\n          <TabsContent key={tab.id} value={tab.id}>\r\n            {tab.content}\r\n          </TabsContent>\r\n        ))}\r\n      </Tabs>\r\n      \r\n    </DndProvider></>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
